{"version":3,"file":"main.15a72840091920325b79.hot-update.js","sources":["/Users/agreenspan/Apps/dice/src/pages/home.jsx"],"sourcesContent":["// @flow\nimport React from 'react';\nimport _ from 'lodash';\nimport {Button, Col, Container, Row} from 'reactstrap';\n\nclass Home extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      statRank: 0,\n      skillRank: 0,\n      black: {\n        failWeight: 1,\n        failRange: 1,\n        successWeight: 1,\n        successRange: 1\n      },\n      white: {\n        failWeight: 1,\n        failRange: 1,\n        successWeight: 2,\n        successRange: 1\n      }\n    }\n  }\n\n  changeStat = value => {\n    this.setState({statRank: value})\n  };\n\n  changeSkill = value => {\n    this.setState({skillRank: value})\n  };\n\n  handleChange = (event) => {\n    this.setState(prev => {\n      prev[event.target.name] = event.target.value;\n      return prev;\n    });\n  };\n\n  computeOutcomes = () => {\n    const rolls = _.map([1,2,3,4,5,6], d1 => {\n      return _.map([1,2,3,4,5,6], d2 => { \n        return _.map([1,2,3,4,5,6], d3 => {\n          return _.map([1,2,3,4,5,6], d4 => {\n            return _.map([1,2,3,4,5,6], d5 => {\n              let whitePool;\n              let blackPool;\n              switch (this.state.statRank) {\n                case 0:\n                  blackPool = [d1,d2,d3,d4,d5]\n                  whitePool = [];\n                  break;\n                case 1:\n                  blackPool = [d1,d2,d3,d4]\n                  whitePool = [d5]\n                  break;\n                case 2:\n                  blackPool = [d1,d2,d3]\n                  whitePool = [d4,d5]\n                  break;\n                case 3:\n                  blackPool = [d1,d2]\n                  whitePool = [d3,d4,d5]\n                  break;\n                case 4:\n                  blackPool = [d1]\n                  whitePool = [d2,d3,d4,d5]\n                  break;\n                case 5:\n                  blackPool = [];\n                  whitePool = [d1,d2,d3,d4,d5]\n                  break;\n              }\n              const whiteOutcome = _.reduce(whitePool, (sum, die) => {\n                if (die <= this.state.white.failRange) {\n                  sum -= parseInt(this.state.white.failWeight);\n                } else if (die >= 7 - this.state.white.successRange) {\n                  sum += parseInt(this.state.white.successWeight);\n                }\n                return sum;\n              }, 0);\n              const blackOutcome = _.reduce(blackPool, (sum, die) => {\n                if (die <= this.state.black.failRange) {\n                  sum -= parseInt(this.state.black.failWeight);\n                } else if (die >= 7 - this.state.black.successRange) {\n                  sum += parseInt(this.state.black.successWeight);\n                }\n                return sum;\n              }, 0);\n              return blackOutcome + whiteOutcome;\n            });\n          });\n        });\n      });\n    });\n    const flattened =_.flattenDeep(rolls);\n\n    const reduced = _.reduce(flattened, (outcomes, roll) => {\n      if (outcomes.hasOwnProperty(roll)) { outcomes[roll] += 1}\n      else { outcomes[roll] = 1 }\n      return outcomes;\n    }, {});\n\n    const mapped = [];\n    _.forEach(reduced, (value, key) => {\n      mapped.push({\n        outcome: parseInt(key, 10),\n        chance: value/77.76 });\n    });\n\n    const sorted = _.orderBy(mapped, 'outcome', 'desc')\n    return sorted;\n  };\n\n  render () {\n    const outcomes = this.computeOutcomes();\n    const totalSuccess = _.reduce(outcomes, (total, p) => {\n      if (p.outcome > 0) { total += p.chance}\n      return total;\n    }, 0);\n    const totalFailure = _.reduce(outcomes, (total, p) => {\n      if (p.outcome < 0) { total += p.chance}\n      return total;\n    }, 0);\n    const displayOutcomes = _.map(outcomes, (o, i) => {\n      return <tr key={i}>\n        <td>{o.outcome}</td>\n        <td>{o.chance.toFixed(2)}%</td>\n      </tr>\n    });\n\n    const statButtons = [0,1,2,3,4,5].map(i =>\n      <Button color={this.state.statRank == i ? 'primary' : 'default'}\n        onClick={() => this.changeStat(i)}\n        key={i}>\n        {i}\n      </Button>\n    );\n\n    const skillButtons = [0,1,2,3,4,5].map(i =>\n      <Button color={this.state.skillRank == i ? 'primary' : 'default'}\n        onClick={() => this.changeSkill(i)}\n        key={i}>\n        {i}\n      </Button>\n    );\n\n    return (\n      <div>\n        <link rel=\"stylesheet\" \n          href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" \n          integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" \n          crossOrigin=\"anonymous\"/>\n\n        <Container style={{paddingTop: 20}}>\n          <Row>\n            <Col sm='3'>\n              <Row>\n                <Col sm='12'>\n                  <label>Stat Rank:</label> \n                  <span> {this.state.statRank}</span>\n                </Col>\n                <Col sm='12'>\n                  {statButtons}\n                </Col>\n                <Col sm='12' style={{marginBottom: 20}}/>\n                {/* \n                <Col sm='12'>\n                  <label>Skill Rank: </label> \n                  <span> {this.state.skillRank}</span>\n                </Col> \n                <Col sm='12'>\n                  {skillButtons}\n                </Col>\n                <Col sm='12' style={{marginBottom: 20}}/>\n                 */}\n                <Col sm='12'>\n                  <label>Black:</label> \n                </Col>\n                <Col sm='6'>\n                  Fail Weight:\n                  <br/>\n                  <input type='number'\n                    name='black.failWeight'\n                    value={this.state.black.failWeight}\n                    onChange={this.handleChange}\n                    min={1} max={5}\n                    />\n                </Col>\n                <Col sm='6'>\n                  Fail Range: \n                  <br/>\n                  <input type='number'\n                    name='black.failRange'\n                    value={this.state.black.failRange}\n                    onChange={this.handleChange}\n                    min={1} max={3}\n                    />\n                </Col>\n                <Col sm='6'>\n                  Success Weight:\n                  <br/>\n                  <input type='number'\n                    name='black.successWeight'\n                    value={this.state.black.successWeight}\n                    onChange={this.handleChange}\n                    min={1} max={5}\n                    />\n                </Col>\n                <Col sm='6'>\n                  Success Range: \n                  <br/>\n                  <input type='number'\n                    name='black.successRange'\n                    value={this.state.black.successRange}\n                    onChange={this.handleChange}\n                    min={1} max={3}\n                    />\n                </Col>                \n                <Col sm='12' style={{marginBottom: 20}}/>\n                <Col sm='12'>\n                  <label>White: </label> \n                </Col>\n                <Col sm='6'>\n                  Fail Weight:\n                  <br/>\n                  <input type='number'\n                    name='white.failWeight'\n                    value={this.state.white.failWeight}\n                    onChange={this.handleChange}\n                    min={1} max={5}\n                    />\n                </Col>\n                <Col sm='6'>\n                  Fail Range: \n                  <br/>\n                  <input type='number'\n                    name='white.failWeight'\n                    value={this.state.white.failRange}\n                    onChange={this.handleChange}\n                    min={1} max={3}\n                    />\n                </Col>\n                <Col sm='6'>\n                  Success Weight:\n                  <br/>\n                  <input type='number'\n                    name='white.successWeight'\n                    value={this.state.white.successWeight}\n                    onChange={this.handleChange}\n                    min={1} max={5}\n                    />\n                </Col>\n                <Col sm='6'>\n                  Success Range: \n                  <br/>\n                  <input type='number'\n                    name='white.successRange'\n                    value={this.state.white.successRange}\n                    onChange={this.handleChange}\n                    min={1} max={3}\n                    />\n                </Col>                \n              </Row>\n            </Col>\n            <Col sm='9'>\n              <Row>\n                <Col sm='12'>\n                  <table className='table table-striped'>\n                    <thead>\n                      <tr>\n                        <th># of Success</th>\n                        <th>% of rolls</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {displayOutcomes}\n                    </tbody>\n                  </table>\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n};\n\nexport default Home;\n\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAsBA;AAAA;AAAA;AACA;AACA;AAxBA;AA0BA;AAAA;AAAA;AACA;AACA;AA5BA;AA8BA;AACA;AACA;AACA;AACA;AACA;AAnCA;AAqCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAxBA;AACA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AA3GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AATA;AAgBA;AACA;AA2FA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAOA;AACA;AACA;AACA;AAFA;AAOA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAIA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAJA;AAOA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAJA;AAOA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAJA;AAOA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAJA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAJA;AAOA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAJA;AAOA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAJA;AAOA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAJA;AASA;AAAA;AAEA;AAAA;AACA;AAAA;AAkBA;AACA;AA7RA;AACA;AA4RA;AAEA;;;;A","sourceRoot":""}