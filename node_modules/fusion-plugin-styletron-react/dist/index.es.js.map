{"version":3,"file":"index.es.js","sources":["../src/legacy-provider.js","../src/inject-declaration-compat-mixin.js","../src/constants.js","../src/server.js","../src/browser.js","../src/index.js"],"sourcesContent":["/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport React from 'react';\n\n/**\n * Provides styletron instance via old context API\n */\n\nclass LegacyStyletronProvider extends React.Component<*, *> {\n  styletron: any;\n\n  getChildContext() {\n    return {styletron: this.styletron};\n  }\n  // $FlowFixMe\n  constructor(props, context) {\n    super(props, context);\n    this.styletron = props.value;\n  }\n  render() {\n    return React.Children.only(this.props.children);\n  }\n}\n\nLegacyStyletronProvider.childContextTypes = {\n  styletron: noop,\n};\n\nexport default LegacyStyletronProvider;\n\nfunction noop() {}\n","/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// $FlowFixMe\nexport const injectDeclarationCompatMixin = Base =>\n  class extends Base {\n    // $FlowFixMe\n    injectDeclaration({prop, val, media, pseudo}) {\n      let style = {[prop]: val};\n      if (pseudo) {\n        style = {\n          [pseudo]: style,\n        };\n      }\n      if (media) {\n        style = {\n          [media]: style,\n        };\n      }\n      return this.renderStyle(style);\n    }\n  };\n","/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport const workerRoute = '/__styletron_debugger_worker.js';\nexport const wasmRoute = '/__styletron_debugger_mappings.wasm';\n","/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint-env node */\n\nimport path from 'path';\nimport fs from 'fs';\n\nimport React from 'react';\nimport {createPlugin, dangerouslySetHTML} from 'fusion-core';\nimport type {FusionPlugin} from 'fusion-core';\n\nimport {Provider as StyletronProvider} from 'styletron-react';\nimport {Server as Styletron} from 'styletron-engine-atomic';\n\nimport LegacyProvider from './legacy-provider.js';\nimport {injectDeclarationCompatMixin} from './inject-declaration-compat-mixin.js';\nimport {workerRoute, wasmRoute} from './constants.js';\n\nlet workerPath;\nlet wasmPath;\n\nif (__DEV__ && __NODE__) {\n  const base = path.dirname(require.resolve('css-to-js-sourcemap-worker'));\n  workerPath = path.resolve(base, 'worker.js');\n  wasmPath = path.resolve(base, 'mappings.wasm');\n}\n\nconst StyletronCompat = injectDeclarationCompatMixin(Styletron);\n\nconst plugin =\n  __NODE__ &&\n  createPlugin({\n    middleware: () => (ctx, next) => {\n      if (__DEV__) {\n        if (ctx.url === workerRoute) {\n          ctx.body = fs.createReadStream(workerPath);\n          return next();\n        }\n        if (ctx.url === wasmRoute) {\n          ctx.body = fs.createReadStream(wasmPath);\n          return next();\n        }\n      }\n\n      if (ctx.element) {\n        const engine = new StyletronCompat();\n\n        ctx.element = (\n          <StyletronProvider value={engine}>\n            <LegacyProvider value={engine}>{ctx.element}</LegacyProvider>\n          </StyletronProvider>\n        );\n\n        return next().then(() => {\n          const stylesForHead = engine.getStylesheetsHtml();\n          ctx.template.head.push(dangerouslySetHTML(stylesForHead));\n        });\n      } else {\n        return next();\n      }\n    },\n  });\n\nexport default ((plugin: any): FusionPlugin<*, *>);\n","/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint-env browser */\n/* global module */\nimport React from 'react';\nimport {createPlugin} from 'fusion-core';\nimport type {FusionPlugin} from 'fusion-core';\n\nimport {Provider as StyletronProvider, DebugEngine} from 'styletron-react';\nimport {Client as Styletron} from 'styletron-engine-atomic';\nimport {workerRoute, wasmRoute} from './constants.js';\n\nimport LegacyProvider from './legacy-provider.js';\nimport {injectDeclarationCompatMixin} from './inject-declaration-compat-mixin.js';\n\nconst StyletronCompat = injectDeclarationCompatMixin(Styletron);\n\nlet debugEngine;\nlet engine;\n\nconst plugin =\n  __BROWSER__ &&\n  createPlugin({\n    middleware: () => (ctx, next) => {\n      if (ctx.element) {\n        if (!engine) {\n          engine = new StyletronCompat({\n            hydrate: document.getElementsByClassName('_styletron_hydrate_'),\n          });\n        }\n        if (__DEV__ && !debugEngine && typeof Worker !== 'undefined') {\n          const worker = new Worker(workerRoute);\n          worker.postMessage({\n            id: 'init_wasm',\n            url: wasmRoute,\n          });\n          worker.postMessage({\n            id: 'set_render_interval',\n            interval: 180,\n          });\n          // $FlowFixMe\n          if (module.hot) {\n            // $FlowFixMe\n            module.hot.addStatusHandler(status => {\n              if (status === 'dispose') {\n                worker.postMessage({id: 'invalidate'});\n              }\n            });\n          }\n          debugEngine = new DebugEngine(worker);\n        }\n        ctx.element = (\n          <StyletronProvider\n            value={engine}\n            debug={debugEngine}\n            debugAfterHydration={Boolean(debugEngine)}\n          >\n            <LegacyProvider value={engine}>{ctx.element}</LegacyProvider>\n          </StyletronProvider>\n        );\n      }\n\n      return next();\n    },\n  });\n\nexport default ((plugin: any): FusionPlugin<*, *>);\n","/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint-env browser */\nimport {\n  styled,\n  withStyle,\n  withStyleDeep,\n  withTransform,\n  withWrapper,\n} from 'styletron-react';\n\nimport server from './server';\nimport browser from './browser';\n\ndeclare var __NODE__: Boolean;\n\nexport default (__NODE__ ? server : browser);\nexport {styled, withStyle, withStyleDeep, withTransform, withWrapper};\n"],"names":["LegacyStyletronProvider","React","Component","styletron","props","context","value","Children","only","children","childContextTypes","noop","injectDeclarationCompatMixin","Base","style","prop","val","pseudo","media","renderStyle","workerRoute","wasmRoute","workerPath","wasmPath","base","path","dirname","require","resolve","StyletronCompat","Styletron","plugin","createPlugin","ctx","next","url","body","fs","createReadStream","element","engine","StyletronProvider","LegacyProvider","then","stylesForHead","getStylesheetsHtml","template","head","push","dangerouslySetHTML","server"],"mappings":";;;;;;;;AAAA;;;;;;;AAQA,AAEA;;;;AAIA,MAAMA,uBAAN,SAAsCC,MAAMC,SAA5C,CAA4D;oBAGxC;WACT;iBAAY,KAAKC;KAAxB;GAJwD;;;cAO9CC,KAAZ,EAAmBC,OAAnB,EAA4B;UACpBD,KAAN,EAAaC,OAAb;SACKF,SAAL,GAAiBC,MAAME,KAAvB;;;WAEO;WACAL,MAAMM,QAAN,CAAeC,IAAf,CAAoB,KAAKJ,KAAL,CAAWK,QAA/B,CAAP;;;;;AAIJT,wBAAwBU,iBAAxB,GAA4C;aAC/BC;CADb;AAIA,AAEA,SAASA,IAAT,GAAgB;;ACpChB;;;;;;;;AASA,AAAO,MAAMC,+BAA+BC,QAC1C,cAAcA,IAAd,CAAmB;;oBAEC;QAAA;OAAA;SAAA;;GAAlB,EAA8C;QACxCC,QAAQ;OAAEC,IAAD,GAAQC;KAArB;;QACIC,MAAJ,EAAY;cACF;SACLA,MAAD,GAAUH;OADZ;;;QAIEI,KAAJ,EAAW;cACD;SACLA,KAAD,GAASJ;OADX;;;WAIK,KAAKK,WAAL,CAAiBL,KAAjB,CAAP;;;CAfC;;ACTP;;;;;;;AAQA,AAAO,MAAMM,cAAc,iCAApB;AACP,AAAO,MAAMC,YAAY,qCAAlB;;ACTP;;;;;;;;;AAUA,AAcA,IAAIC,UAAJ;AACA,IAAIC,QAAJ;;AAEA,IAAI,6CAAJ,EAAyB;QACjBC,OAAOC,KAAKC,OAAL,CAAaC,QAAQC,OAAR,CAAgB,4BAAhB,CAAb,CAAb;eACaH,KAAKG,OAAL,CAAaJ,IAAb,EAAmB,WAAnB,CAAb;aACWC,KAAKG,OAAL,CAAaJ,IAAb,EAAmB,eAAnB,CAAX;;;AAGF,MAAMK,kBAAkBjB,6BAA6BkB,MAA7B,CAAxB;AAEA,MAAMC,SACJ,QACAC,aAAa;cACC,MAAM,CAACC,GAAD,EAAMC,IAAN,KAAe;+CAClB;UACPD,IAAIE,GAAJ,KAAYf,WAAhB,EAA6B;YACvBgB,IAAJ,GAAWC,GAAGC,gBAAH,CAAoBhB,UAApB,CAAX;eACOY,MAAP;;;UAEED,IAAIE,GAAJ,KAAYd,SAAhB,EAA2B;YACrBe,IAAJ,GAAWC,GAAGC,gBAAH,CAAoBf,QAApB,CAAX;eACOW,MAAP;;;;QAIAD,IAAIM,OAAR,EAAiB;YACTC,SAAS,IAAIX,eAAJ,EAAf;UAEIU,OAAJ,GACE,oBAACE,QAAD;eAA0BD;SACxB,oBAACE,uBAAD;eAAuBF;SAASP,IAAIM,OAApC,CADF,CADF;aAMOL,OAAOS,IAAP,CAAY,MAAM;cACjBC,gBAAgBJ,OAAOK,kBAAP,EAAtB;YACIC,QAAJ,CAAaC,IAAb,CAAkBC,IAAlB,CAAuBC,mBAAmBL,aAAnB,CAAvB;OAFK,CAAP;KATF,MAaO;aACEV,MAAP;;;CA3BN,CAFF;;ACnCA;;;;;;;;;;;;ACAA;;;;;;;;;AASA,AAaA,YAA2BgB,MAA3B;;;;"}